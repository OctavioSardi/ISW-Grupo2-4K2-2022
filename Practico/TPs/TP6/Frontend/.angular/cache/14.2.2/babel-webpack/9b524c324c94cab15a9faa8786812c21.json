{"ast":null,"code":"import { HttpEvent, HttpRequest, HttpHandler, HttpErrorResponse } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/modal-dialog.service\";\nexport let MyInterceptor = /*#__PURE__*/(() => {\n  class MyInterceptor {\n    constructor(ms) {\n      this.ms = ms;\n    }\n\n    intercept(req, next) {\n      let NoBloquearPantalla = req.headers.get(\"NoBloquearPantalla\"); //EnTypeahead\n\n      if (!NoBloquearPantalla) this.ms.BloquearPantalla();\n      return next.handle(req).pipe(catchError(error => {\n        // 401 handled in auth.interceptor\n        if ( // error.status !== 401 &&\n        // error.error &&\n        error.error.ExceptionMessage) {\n          this.ms.Alert(error.error.ExceptionMessage, \"Error\", \"d\");\n        }\n\n        return throwError(error);\n      }), finalize(() => {\n        if (!NoBloquearPantalla) this.ms.DesbloquearPantalla();\n      }));\n    }\n\n  }\n\n  MyInterceptor.ɵfac = function MyInterceptor_Factory(t) {\n    return new (t || MyInterceptor)(i0.ɵɵinject(i1.ModalDialogService));\n  };\n\n  MyInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyInterceptor,\n    factory: MyInterceptor.ɵfac\n  });\n  return MyInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}